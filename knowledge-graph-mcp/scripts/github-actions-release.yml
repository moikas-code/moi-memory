name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary: knowledge-graph-mcp
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            binary: knowledge-graph-mcp
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            binary: knowledge-graph-mcp
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary: knowledge-graph-mcp.exe
            archive: zip
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../knowledge-graph-mcp-${{ matrix.target }}.tar.gz ${{ matrix.binary }}
          cd ../../../
          shasum -a 256 knowledge-graph-mcp-${{ matrix.target }}.tar.gz > knowledge-graph-mcp-${{ matrix.target }}.tar.gz.sha256
      
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../knowledge-graph-mcp-${{ matrix.target }}.zip ${{ matrix.binary }}
          cd ../../../
          sha256sum knowledge-graph-mcp-${{ matrix.target }}.zip > knowledge-graph-mcp-${{ matrix.target }}.zip.sha256
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.target }}
          path: |
            knowledge-graph-mcp-${{ matrix.target }}.${{ matrix.archive }}
            knowledge-graph-mcp-${{ matrix.target }}.${{ matrix.archive }}.sha256

  docker:
    name: Build Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/knowledge-graph-mcp:latest
            ${{ secrets.DOCKER_USERNAME }}/knowledge-graph-mcp:${{ steps.version.outputs.VERSION_NO_V }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    needs: [build, docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Generate release notes
        id: notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Knowledge Graph MCP Server ${{ steps.version.outputs.VERSION }}
          
          ### Installation
          
          #### Binary Installation
          Download the appropriate binary for your platform and make it executable:
          
          ```bash
          # Linux
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/knowledge-graph-mcp-x86_64-unknown-linux-gnu.tar.gz | tar xz
          chmod +x knowledge-graph-mcp
          sudo mv knowledge-graph-mcp /usr/local/bin/
          
          # macOS (Intel)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/knowledge-graph-mcp-x86_64-apple-darwin.tar.gz | tar xz
          chmod +x knowledge-graph-mcp
          sudo mv knowledge-graph-mcp /usr/local/bin/
          
          # macOS (Apple Silicon)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/knowledge-graph-mcp-aarch64-apple-darwin.tar.gz | tar xz
          chmod +x knowledge-graph-mcp
          sudo mv knowledge-graph-mcp /usr/local/bin/
          ```
          
          #### Docker Installation
          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/knowledge-graph-mcp:${{ steps.version.outputs.VERSION }}
          ```
          
          ### Checksums
          Verify your download with the provided SHA256 checksums.
          
          ### What's New
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Knowledge Graph MCP Server ${{ steps.version.outputs.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}